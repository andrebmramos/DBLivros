// <auto-generated />
using DBLivros;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBLivros.Migrations
{
    [DbContext(typeof(LivroContext))]
    partial class LivroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBLivros.Autor", b =>
                {
                    b.Property<int>("AutorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("AutorId");

                    b.ToTable("Autores");

                    b.HasData(
                        new
                        {
                            AutorId = -1,
                            Nome = "Andre"
                        },
                        new
                        {
                            AutorId = -2,
                            Nome = "Carlos"
                        },
                        new
                        {
                            AutorId = -3,
                            Nome = "Tassia"
                        });
                });

            modelBuilder.Entity("DBLivros.Capitulo", b =>
                {
                    b.Property<int>("CapituloId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo");

                    b.Property<int>("LivroId");

                    b.HasKey("CapituloId");

                    b.HasIndex("LivroId");

                    b.ToTable("Capitulos");

                    b.HasData(
                        new
                        {
                            CapituloId = -1,
                            Conteudo = "Primeiro capitulo de ficção",
                            LivroId = -1
                        },
                        new
                        {
                            CapituloId = -2,
                            Conteudo = "Segundo capitulo de ficção",
                            LivroId = -1
                        },
                        new
                        {
                            CapituloId = -3,
                            Conteudo = "Terceiro capitulo de ficção",
                            LivroId = -1
                        },
                        new
                        {
                            CapituloId = -4,
                            Conteudo = "Primeiro capitulo de infantil",
                            LivroId = -2
                        },
                        new
                        {
                            CapituloId = -5,
                            Conteudo = "Segundo capitulo de infantil",
                            LivroId = -2
                        },
                        new
                        {
                            CapituloId = -6,
                            Conteudo = "Primeiro capitulo de romance",
                            LivroId = -3
                        },
                        new
                        {
                            CapituloId = -7,
                            Conteudo = "Segundo capitulo de romance",
                            LivroId = -3
                        });
                });

            modelBuilder.Entity("DBLivros.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = -1,
                            Descricao = "Ficção"
                        },
                        new
                        {
                            CategoriaId = -2,
                            Descricao = "Infantil"
                        },
                        new
                        {
                            CategoriaId = -3,
                            Descricao = "Romance"
                        },
                        new
                        {
                            CategoriaId = -4,
                            Descricao = "Mais vendidos"
                        });
                });

            modelBuilder.Entity("DBLivros.Livro", b =>
                {
                    b.Property<int>("LivroId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutorId");

                    b.Property<string>("Nome");

                    b.HasKey("LivroId");

                    b.HasIndex("AutorId");

                    b.ToTable("Livros");

                    b.HasData(
                        new
                        {
                            LivroId = -1,
                            AutorId = -1,
                            Nome = "Livro de Ficção"
                        },
                        new
                        {
                            LivroId = -2,
                            AutorId = -2,
                            Nome = "Livro Infantil"
                        },
                        new
                        {
                            LivroId = -3,
                            AutorId = -3,
                            Nome = "Livro de Romance"
                        });
                });

            modelBuilder.Entity("DBLivros.LivroCategoria", b =>
                {
                    b.Property<int>("LivroId");

                    b.Property<int>("CategoriaId");

                    b.HasKey("LivroId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("LivroCategorias");

                    b.HasData(
                        new
                        {
                            LivroId = -1,
                            CategoriaId = -1
                        },
                        new
                        {
                            LivroId = -1,
                            CategoriaId = -4
                        },
                        new
                        {
                            LivroId = -2,
                            CategoriaId = -2
                        },
                        new
                        {
                            LivroId = -2,
                            CategoriaId = -4
                        },
                        new
                        {
                            LivroId = -3,
                            CategoriaId = -3
                        });
                });

            modelBuilder.Entity("DBLivros.Capitulo", b =>
                {
                    b.HasOne("DBLivros.Livro", "Livro")
                        .WithMany("Capitulos")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBLivros.Livro", b =>
                {
                    b.HasOne("DBLivros.Autor", "Autor")
                        .WithMany("Livros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DBLivros.LivroCategoria", b =>
                {
                    b.HasOne("DBLivros.Categoria", "Categoria")
                        .WithMany("LivroCategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBLivros.Livro", "Livro")
                        .WithMany("LivroCategorias")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
